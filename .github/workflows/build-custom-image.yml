name: Build Google Custom Image Using Packer

on:
  pull_request:
    branches:
      - main

jobs:
  integration_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Start PostgreSQL Service
        if: ${{ !contains(steps.status.outputs.service_status, 'running') }}
        run: sudo service postgresql start

      - name: Adjust Permissions on PostgreSQL Socket File
        run: sudo chmod 777 /var/run/postgresql/.s.PGSQL.5432 || true

      - name: Change PostgreSQL Password
        run: |
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '${{ secrets.PG_PASSWORD }}';"

      - name: Update PostgreSQL Authentication Method
        run: |
          sudo sed -i 's/^\(host.*all.*all.*\)\(ident\)\(.*\)$/\1md5\3/g' /etc/postgresql/14/main/pg_hba.conf

      - name: Restart PostgreSQL
        run: sudo systemctl restart postgresql

      - name: Create PostgreSQL Database
        run: |
          sudo -u postgres psql -c "CREATE DATABASE sjdatabase;"

      - name: Login to PostgreSQL
        run: |
          export PGPASSWORD='${{ secrets.PG_PASSWORD }}'
          psql -U postgres -h localhost -d postgres -c "SELECT version();"

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          pip install -r app/requirements.txt
          pip install pytest-cov
          pip install psycopg2-binary
          pip install httpx

      - name: Create webapp.log file and grant write permissions
        run: |
          sudo touch /var/log/webapp.log
          sudo chmod 777 /var/log/webapp.log

      - name: Run Tests
        env:
          POSTGRES_DATABASE_URL: 'postgresql://${{ secrets.PG_USER }}:${{ secrets.PG_PASSWORD }}@localhost:5432/sjdatabase'
        run: |
          pytest app/tests/integration_test.py

  build_ami:
    name: custom_image_build
    runs-on: ubuntu-latest
    needs: integration_test


    steps:
      # - name: Check if this push is from a PR merge
      #   run: |
      #     if [[ ${{ github.event_name }} == 'push' && ${{ contains(github.event.head_commit.message, 'Merge pull request') }} ]]; then
      #       echo "This push is from a pull request merge."
      #     else
      #       echo "This push is not from a pull request merge."
      #       exit 1
      #     fi

      - name: Checkout code
        if: success()
        uses: actions/checkout@v2

      - name: Zip Folder
        if: success()
        run: zip -r webapp.zip .

      - name: Setting up packer
        uses: hashicorp/setup-packer@main

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      # - name: Run Packer
      #   run: |
      #     cd packer-webapp
      #     packer init image.pkr.hcl
      #     packer build \
      #       -var="project_id=${{ vars.GCP_PROJECT_ID }}" \
      #       -var="source_image_family=${{ vars.SOURCE_IMAGE_FAMILY}}" \
      #       -var="zone=${{ vars.ZONE}}" \
      #       -var="disk_size=${{ vars.DISK_SIZE }}" \
      #       -var="disk_type=${{ vars.DISK_TYPE}}" \
      #       -var="network=${{ vars.NETWORK}}" \
      #       -var="machine_type=${{ vars.MACHINE_TYPE}}" \
      #       image.pkr.hcl
        
  
      - name: Get Latest Image Name
        id: image_name
        run: |
          IMAGE_NAME=$(gcloud compute images list --format="value(name)" --filter="name=centos-8-packer" --sort-by=~creationTimestamp --limit=1)
          echo "image_name=${IMAGE_NAME}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      - name: Create Instance Template
        run: |
          gcloud compute instance-templates create instance-template-202404056 \
            --machine-type=n1-standard-2 \
            --network-interface=network=vpc-1,subnet=projects/dev-gcp-project-414615/regions/us-east4/subnetworks/backend-subnet \
            --instance-template-region=us-east4 \
            --service-account=${{ secrets.service_account }} \
            --scopes=cloud-platform \
            --create-disk=auto-delete=yes,boot=yes,image=${{ env.IMAGE_NAME }},size=30,type=pd-ssd \
            --metadata=startup-script="$(cat <<EOF
            #!/bin/bash
            exec >> /tmp/logfile.log 2>&1
            DB_USERNAME=${{ secrets.DB_USERNAME }} 
            DB_PASSWORD=${{ secrets.DB_PASSWORD }} 
            DB_HOST=${{ secrets.DB_HOST }} 
            DB_NAME=${{ secrets.db_name }}
            POSTGRES_PORT=${{ secrets.postgres_port }}
            ENV_DIR="/home/csye6225/webapp/app/.env"
            sudo touch $ENV_DIR
            sudo chown $APP_USER:$APP_GROUP $ENV_DIR
            sudo chmod 755 $ENV_DIR
            sudo echo "POSTGRES_DATABASE_URL=postgresql://\$DB_USERNAME:\$DB_PASSWORD@\$DB_HOST:\$POSTGRES_PORT/\$DB_NAME" >> $ENV_DIR
            sudo echo "GCP_PROJECT_ID=${{ secrets.project_id }}" >> $ENV_DIR
            sleep 5
            sudo systemctl restart webapp.service
            EOF
            )"

      - name: Start Managed Instance Group Update
        run: |
          gcloud compute instance-groups managed rolling-action start-update appserver-igm \
            --version=template=projects/dev-gcp-414600/regions/us-east4/instanceTemplates/instance-template-202404056 \
            --region=us-east4 \
            --type=proactive

      - name: Wait for Instance Group Refresh to Complete
        id: wait-for-refresh
        run: |
          gcloud compute instance-groups managed wait-until appserver-igm --stable --region=us-east4 --quiet